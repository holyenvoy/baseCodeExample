package main

import (
	"fmt"
	"time"
)

//共享变量有一个读通道和一个写通道组成
type sharded_var struct {
	reader chan int
	writer chan int
}

//共享变量维护协程
func sharded_var_whachdog(v sharded_var) {
	go func() {
		//初始值
		var value int = 5
		for {
			//监听读写通道，完成服务
			select {
			case value = <-v.writer:
				fmt.Println("use writer")
			case v.reader <- value:
				fmt.Println("use reader")
			}
		}
	}()
}

func main() {
	//初始化，并开始维护协程
	v := sharded_var{make(chan int), make(chan int)}
	sharded_var_whachdog(v)

	//读取初始值
	fmt.Println(<-v.reader)
	fmt.Println("=========")
	time.Sleep(time.Second * 2)

	//写入一个值
	fmt.Println("write 1 to ch")
	v.writer <- 1
	//读取新写入的值
	fmt.Println(<-v.reader)

	fmt.Println("=========")
	v.writer <- 123
	//读取新写入的值
	fmt.Println(<-v.reader)

}
